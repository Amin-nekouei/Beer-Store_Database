--24S_CST2355_310 Database Systems
-- ORACLE application database and associated users creation script for beerStore


--Rafael Ignacio xDias
--Amin Nekouei



-- Should be run while connected as 'sys as sysdba'
--

-- Create TABLESPACE
CREATE TABLESPACE beerStore
DATAFILE 'beerStore.dat' SIZE 100M 
ONLINE; 

-- Create Users
CREATE USER manager IDENTIFIED BY It1234 ACCOUNT UNLOCK
DEFAULT TABLESPACE beerStore
QUOTA UNLIMITED ON beerStore;

-- Create ROLES
CREATE ROLE applicationAdmin;

-- Grant PRIVILEGES
GRANT CONNECT, RESOURCE, CREATE VIEW, CREATE TRIGGER, CREATE PROCEDURE TO applicationAdmin;
GRANT applicationAdmin TO manager;

-- NOW we can connect as the applicationAdmin and create the stored procedures, tables, and triggers
CONNECT manager/It1234;
-------------------------------------------------------------------------------------------tables-------------------------------------------------------------------------------
-- Table CustomersInfo
CREATE TABLE CustomersInfo (
  CustomersInfoID NUMBER PRIMARY KEY,
  Name VARCHAR2(50) NOT NULL,
  Email VARCHAR2(50),
  Street VARCHAR2(50) NOT NULL,
  City VARCHAR2(30) NOT NULL,
  PostalCode VARCHAR2(7) NOT NULL,
  CustomerStatus VARCHAR2(7)
);

-- Table CustomerPhone
CREATE TABLE CustomerPhone (
  PhoneID NUMBER PRIMARY KEY,
  Phone VARCHAR2(12) NOT NULL,
  phoneStatus VARCHAR2(7)
);

-- Table PhoneHistory
CREATE TABLE PhoneHistory (
  PhoneHistoryID NUMBER PRIMARY KEY,
  PhoneID NUMBER NOT NULL,
  CustomerId NUMBER NOT NULL,
  StartDate DATE NOT NULL,
  EndDate DATE,
  FOREIGN KEY (CustomerId) REFERENCES CustomersInfo (CustomersInfoID),
  FOREIGN KEY (PhoneID) REFERENCES CustomerPhone (PhoneID)
);

-- Table SalesOrders
CREATE TABLE SalesOrders (
  SalesOrderID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  DateTime TIMESTAMP NOT NULL,
  Discount NUMBER(15,2),
  SubTotal NUMBER(15,2) NOT NULL,
  Tax NUMBER(15,2) NOT NULL,
  CustomerId NUMBER NOT NULL,
  FOREIGN KEY (CustomerId) REFERENCES CustomersInfo (CustomersInfoID)
);

-- Table BeerTypes
CREATE TABLE BeerTypes (
  BeerTypeID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  Description VARCHAR2(100) NOT NULL
);

-- Table Sizes
CREATE TABLE Sizes (
  SizeID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  Description VARCHAR2(100) NOT NULL
);

-- Table BreweryInfo
CREATE TABLE BreweryInfo (
  BreweryInfoID NUMBER PRIMARY KEY,
  Phone VARCHAR2(12) NOT NULL,
  Email VARCHAR2(50),
  Street VARCHAR2(50) NOT NULL,
  City VARCHAR2(30) NOT NULL,
  PostalCode VARCHAR2(10) NOT NULL,
  BreweryStatus VARCHAR2(7)
);

-- Table BreweryName
CREATE TABLE BreweryName (
  BreweryNameID NUMBER PRIMARY KEY,
  Name VARCHAR2(50) NOT NULL,
  NameStatus VARCHAR2(7)
);

-- Table BreweryHistory
CREATE TABLE BreweryHistory (
  BreweryHistoryID NUMBER PRIMARY KEY,
  BreweryID NUMBER NOT NULL,
  NameID NUMBER NOT NULL,
  StartDate DATE NOT NULL,
  EndDate DATE,
  FOREIGN KEY (BreweryID) REFERENCES BreweryInfo (BreweryInfoID),
  FOREIGN KEY (NameID) REFERENCES BreweryName(BreweryNameID)
);

-- Table InventoryStatuses
CREATE TABLE InventoryStatuses (
  InventoryStatusID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  Description VARCHAR2(100) NOT NULL
);

-- Table ProductsInfo
CREATE TABLE ProductsInfo (
  ProductsInfoID NUMBER PRIMARY KEY,
  Name VARCHAR2(50) NOT NULL,
  Description VARCHAR2(100),
  SizeID NUMBER NOT NULL,
  BeerTypeID NUMBER NOT NULL,
  InventoryStatusID NUMBER NOT NULL,
  BreweryID NUMBER NOT NULL,
  ProductsStatus VARCHAR2(7),
  FOREIGN KEY (SizeID) REFERENCES Sizes (SizeID),
  FOREIGN KEY (InventoryStatusID) REFERENCES InventoryStatuses (InventoryStatusID),
  FOREIGN KEY (BreweryID) REFERENCES BreweryInfo (BreweryInfoID),
  FOREIGN KEY (BeerTypeID) REFERENCES BeerTypes (BeerTypeID)
);

-- Table Price
CREATE TABLE Price (
  PriceID NUMBER PRIMARY KEY,
  Price NUMBER(15,2),
  PriceStatus VARCHAR2(7)
);

-- Table PriceHistory
CREATE TABLE PriceHistory (
  PriceHistoryID NUMBER PRIMARY KEY,
  PriceID NUMBER NOT NULL,
  ProductID NUMBER NOT NULL,
  StartDate DATE NOT NULL,
  EndDate DATE,
  FOREIGN KEY (ProductID) REFERENCES ProductsInfo (ProductsInfoID),
  FOREIGN KEY (PriceID) REFERENCES Price (PriceID)
);

-- Table AlcoholicBeers
CREATE TABLE AlcoholicBeers (
  AlcoholicBeerID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  ABV NUMBER(5,2),
  BitternessUnits NUMBER,
  ProductID NUMBER NOT NULL,
  FOREIGN KEY (ProductID) REFERENCES ProductsInfo (ProductsInfoID)
);

-- Table NonAlcoholicBeers
CREATE TABLE NonAlcoholicBeers (
  NonAlcoholicBeerID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  Flavor VARCHAR2(100),
  ProductID NUMBER NOT NULL,
  FOREIGN KEY (ProductID) REFERENCES ProductsInfo (ProductsInfoID)
);

-- Table PremiumBeers
CREATE TABLE PremiumBeers (
  PremiumBeerID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  ABV NUMBER(5,2),
  SpecialFeatures VARCHAR2(100),
  ProductID NUMBER NOT NULL,
  FOREIGN KEY (ProductID) REFERENCES ProductsInfo (ProductsInfoID)
);

-- Table OrderItems
CREATE TABLE OrderItems (
  OrderItemID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  Quantity NUMBER NOT NULL,
  ProductID NUMBER NOT NULL,
  SalesOrderID NUMBER NOT NULL,
  FOREIGN KEY (ProductID) REFERENCES ProductsInfo (ProductsInfoID),
  FOREIGN KEY (SalesOrderID) REFERENCES SalesOrders (SalesOrderID)
);
-----------------------------------------------------------------veiws-------------------------------------------------------------------------------
CREATE VIEW Customers 
AS
SELECT
	CustomersInfo.CustomersInfoID,
    CustomersInfo.Name,
    CustomersInfo.Email,
    CustomersInfo.Street,
    CustomersInfo.City,
    CustomersInfo.PostalCode,
    CustomerPhone.Phone
FROM 
    CustomersInfo
LEFT JOIN 
    PhoneHistory ON CustomersInfo.CustomersInfoID = PhoneHistory.CustomerId
LEFT JOIN 
    CustomerPhone ON PhoneHistory.PhoneID = CustomerPhone.PhoneID
WHERE 
    PhoneHistory.EndDate IS NULL;
	
CREATE OR REPLACE VIEW Breweries 
AS
SELECT
    BreweryInfo.BreweryInfoID,
    BreweryInfo.Email,
    BreweryInfo.Street,
    BreweryInfo.City,
    BreweryInfo.PostalCode,
    BreweryInfo.Phone,
    BreweryName.Name
FROM 
    BreweryInfo
LEFT JOIN 
    BreweryHistory ON BreweryInfo.BreweryInfoID = BreweryHistory.BreweryID
LEFT JOIN 
    BreweryName ON BreweryHistory.NameID = BreweryName.BreweryNameID
WHERE 
    BreweryHistory.EndDate IS NULL;

	

CREATE VIEW Products 
AS
SELECT
	ProductsInfo.ProductsInfoID,
    ProductsInfo.Name,
    ProductsInfo.Description,
    ProductsInfo.SizeID,
    ProductsInfo.BeerTypeID,
	ProductsInfo.InventoryStatusID,
	ProductsInfo.BreweryID,
    Price.Price
FROM 
    ProductsInfo
LEFT JOIN 
    PriceHistory ON ProductsInfo.ProductsInfoID = PriceHistory.ProductID
LEFT JOIN 
    Price ON PriceHistory.PriceID = Price.PriceID
WHERE 
    PriceHistory.EndDate IS NULL;		
----------------------------------------------------------------------------------------squences--------------------------------------------------------------------------------------
CREATE SEQUENCE CustomersInfoID_seq
    INCREMENT BY 1
    START WITH 1
    NOCYCLE;
	
CREATE SEQUENCE CustomerPhoneID_seq
    INCREMENT BY 1
    START WITH 1
    NOCYCLE;

CREATE SEQUENCE PhoneHistoryID_seq
    INCREMENT BY 1
    START WITH 1
    NOCYCLE;

CREATE SEQUENCE BreweryInfoID_seq
    INCREMENT BY 1
    START WITH 1
    NOCYCLE;

CREATE SEQUENCE BreweryNameID_seq
    INCREMENT BY 1
    START WITH 1
    NOCYCLE;

CREATE SEQUENCE BreweryHistoryID_seq
    INCREMENT BY 1
    START WITH 1
    NOCYCLE;

CREATE SEQUENCE ProductsInfoID_seq
    INCREMENT BY 1
    START WITH 1
    NOCYCLE;
	
CREATE SEQUENCE PriceID_seq
    INCREMENT BY 1
    START WITH 1
    NOCYCLE;

CREATE SEQUENCE PriceHistoryID_seq
    INCREMENT BY 1
    START WITH 1
    NOCYCLE;
	




-----------------------------------------------------------------------------------------PACKAGE---------------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE manage_history AS
    PROCEDURE deleteBrewerys(inputID IN NUMBER);
    PROCEDURE deleteCustomer(inputID IN NUMBER);
    PROCEDURE deleteProduct(inputID IN NUMBER);
    PROCEDURE updateName(name IN VARCHAR2, inputID IN NUMBER);
    PROCEDURE insertBrewerys(name VARCHAR2, email VARCHAR2, street VARCHAR2, city VARCHAR2, postalCode VARCHAR2, phone VARCHAR2);
    PROCEDURE updatePhone(phone_number IN VARCHAR2, inputID IN NUMBER);
    PROCEDURE insertCustomers(name VARCHAR2, email VARCHAR2, street VARCHAR2, city VARCHAR2, postalCode VARCHAR2, phone VARCHAR2);
    PROCEDURE updatePrice(price IN NUMBER, inputID IN NUMBER);
    PROCEDURE insertProducts(name IN VARCHAR2, description IN VARCHAR2, sizeID IN NUMBER, beerTypeID IN NUMBER, inventoryStatusID IN NUMBER, breweryID IN NUMBER, price IN NUMBER);
END manage_history;
/


CREATE OR REPLACE PACKAGE BODY manage_history AS

    PROCEDURE deleteBrewerys(inputID IN NUMBER) IS
    BEGIN
        UPDATE BreweryHistory
        SET EndDate = SYSDATE
        WHERE BreweryID = inputID AND EndDate IS NULL;

        UPDATE BreweryInfo
        SET BreweryStatus = 'Deleted'
        WHERE BreweryInfoID = inputID;

        UPDATE BreweryName
        SET NameStatus = 'Deleted'
        WHERE BreweryNameID IN (
            SELECT NameID
            FROM BreweryHistory
            WHERE BreweryID = inputID
        );
    END deleteBrewerys;

    PROCEDURE deleteCustomer(inputID IN NUMBER) IS
    BEGIN
        UPDATE PhoneHistory
        SET EndDate = SYSDATE
        WHERE CustomerId = inputID AND EndDate IS NULL;

        UPDATE CustomersInfo
        SET CustomerStatus = 'Deleted'
        WHERE CustomersInfoID = inputID;

        UPDATE CustomerPhone
        SET PhoneStatus = 'Deleted'
        WHERE PhoneID IN (
            SELECT PhoneID
            FROM PhoneHistory
            WHERE CustomerId = inputID
        );
    END deleteCustomer;

    PROCEDURE deleteProduct(inputID IN NUMBER) IS
    BEGIN
        UPDATE PriceHistory
        SET EndDate = SYSDATE
        WHERE ProductID = inputID AND EndDate IS NULL;

        UPDATE ProductsInfo
        SET ProductsStatus = 'Deleted'
        WHERE ProductsInfoID = inputID;

        UPDATE Price
        SET PriceStatus = 'Deleted'
        WHERE PriceID IN (
            SELECT PriceID
            FROM PriceHistory
            WHERE ProductID = inputID
        );
    END deleteProduct;

    PROCEDURE updateName(name IN VARCHAR2, inputID IN NUMBER) IS
        LastID NUMBER;
    BEGIN
        LastID := BreweryNameID_seq.NEXTVAL;
        INSERT INTO BreweryName (BreweryNameID, Name)
        VALUES (LastID, name);

        UPDATE BreweryHistory
        SET EndDate = SYSDATE
        WHERE BreweryID = inputID AND EndDate IS NULL;

        INSERT INTO BreweryHistory (BreweryHistoryID, BreweryID, NameID, StartDate)
        VALUES (BreweryHistoryID_seq.NEXTVAL, inputID, LastID, SYSDATE);
    END updateName;

    PROCEDURE insertBrewerys (
        name VARCHAR2,
        email VARCHAR2,
        street VARCHAR2,
        city VARCHAR2,
        postalCode VARCHAR2,
        phone VARCHAR2
    ) IS
        nameID NUMBER;
        breweryID NUMBER;
    BEGIN
        nameID := BreweryNameID_seq.NEXTVAL;
        breweryID := BreweryInfoID_seq.NEXTVAL;

        INSERT INTO BreweryName (BreweryNameID, Name)
        VALUES (nameID, name);

        INSERT INTO BreweryInfo (BreweryInfoID, Phone, Email, Street, City, PostalCode)
        VALUES (breweryID, phone, email, street, city, postalCode);

        INSERT INTO BreweryHistory (BreweryHistoryID, BreweryID, NameID, StartDate)
        VALUES (BreweryHistoryID_seq.NEXTVAL, breweryID, nameID, SYSDATE);
    END insertBrewerys;

    PROCEDURE updatePhone(phone_number IN VARCHAR2, inputID IN NUMBER) IS
        LastID NUMBER;
    BEGIN
        LastID := CustomerPhoneID_seq.NEXTVAL;
        INSERT INTO CustomerPhone (PhoneID, phone)
        VALUES (LastID, phone_number);

        UPDATE PhoneHistory
        SET EndDate = SYSDATE
        WHERE CustomerId = inputID AND EndDate IS NULL;

        INSERT INTO PhoneHistory (PhoneHistoryID, PhoneID, CustomerId, StartDate)
        VALUES (PhoneHistoryID_seq.NEXTVAL, LastID, inputID, SYSDATE);
    END updatePhone;

    PROCEDURE insertCustomers (
        name VARCHAR2,
        email VARCHAR2,
        street VARCHAR2,
        city VARCHAR2,
        postalCode VARCHAR2,
        phone VARCHAR2
    ) IS
        phoneID NUMBER;
        customersID NUMBER;
    BEGIN
        phoneID := CustomerPhoneID_seq.NEXTVAL;
        customersID := CustomersInfoID_seq.NEXTVAL;

        INSERT INTO CustomerPhone (PhoneID, phone)
        VALUES (phoneID, phone);

        INSERT INTO CustomersInfo (CustomersInfoID, name, email, street, city, postalCode)
        VALUES (customersID, name, email, street, city, postalCode);

        INSERT INTO PhoneHistory (PhoneHistoryID, PhoneID, CustomerId, StartDate)
        VALUES (PhoneHistoryID_seq.NEXTVAL, phoneID, customersID, SYSDATE);
    END insertCustomers;

    PROCEDURE updatePrice(price IN NUMBER, inputID IN NUMBER) IS
        lastID NUMBER;
    BEGIN
        lastID := PriceID_seq.NEXTVAL;

        INSERT INTO Price (PriceID, Price)
        VALUES (lastID, price);

        UPDATE PriceHistory
        SET EndDate = SYSDATE
        WHERE ProductID = inputID AND EndDate IS NULL;

        INSERT INTO PriceHistory (PriceHistoryID, PriceID, ProductID, StartDate)
        VALUES (PriceHistoryID_seq.NEXTVAL, lastID, inputID, SYSDATE);
    END updatePrice;

    PROCEDURE insertProducts (
        name IN VARCHAR2,
        description IN VARCHAR2,
        sizeID IN NUMBER,
        beerTypeID IN NUMBER,
        inventoryStatusID IN NUMBER,
        breweryID IN NUMBER,
        price IN NUMBER
    ) IS
        productID NUMBER;
        priceID NUMBER;
    BEGIN
        productID := ProductsInfoID_seq.NEXTVAL;

        INSERT INTO ProductsInfo (ProductsInfoID, Name, Description, SizeID, BeerTypeID, InventoryStatusID, BreweryID)
        VALUES (productID, name, description, sizeID, beerTypeID, inventoryStatusID, breweryID);

        priceID := PriceID_seq.NEXTVAL;
        INSERT INTO Price (PriceID, Price)
        VALUES (priceID, price);

        INSERT INTO PriceHistory (PriceHistoryID, PriceID, ProductID, StartDate)
        VALUES (PriceHistoryID_seq.NEXTVAL, priceID, productID, SYSDATE);
    END insertProducts;

END manage_history;
/

--------------------------------------------------------------------------------------TRIGGERS--------------------------------------------------------------------------------------------
	CREATE OR REPLACE TRIGGER deletecustomer_tri
	INSTEAD OF DELETE
	ON Customers
	FOR EACH ROW 
	DECLARE
		CustomerId NUMBER := :old.CustomersInfoID;    	

	BEGIN
		manage_history.deletecustomer(CustomerId);
	END;
/			
	CREATE OR REPLACE TRIGGER deleteProduct_tri
	INSTEAD OF DELETE
	ON Products
	FOR EACH ROW 
	DECLARE
		ProductID NUMBER := :old.ProductsInfoID;    	

	BEGIN
		manage_history.deleteProduct(ProductID);
	END;
/
		
CREATE OR REPLACE TRIGGER deleteBrewerys_tri
INSTEAD OF DELETE
ON Breweries
FOR EACH ROW 
DECLARE
	breweryID NUMBER := :old.BreweryInfoID;    	

BEGIN
	manage_history.deleteBrewerys(breweryID);
END;
/	


	CREATE OR REPLACE TRIGGER UpdateName_ter
	INSTEAD OF UPDATE
	ON Breweries
	FOR EACH ROW
	BEGIN
		manage_history.UpdateName(:NEW.Name, :NEW.BreweryInfoID);
	END;
	/

CREATE OR REPLACE TRIGGER insertIntoBrewerys
INSTEAD OF INSERT
ON Breweries
FOR EACH ROW 
DECLARE
    name VARCHAR2(50) := :NEW.Name;
    email VARCHAR2(50) := :NEW.Email;
    street VARCHAR2(50) := :NEW.Street;
    city VARCHAR2(50) := :NEW.City;
    postalCode VARCHAR2(7) := :NEW.PostalCode;
    phone VARCHAR2(12) := :NEW.Phone;
BEGIN
    manage_history.insertBrewerys(name, email, street, city, postalCode, phone);
END;
/
CREATE OR REPLACE TRIGGER UpdatePhone
INSTEAD OF UPDATE
ON Customers
FOR EACH ROW 
DECLARE

	tel	varchar(12) := :NEW.Phone;
	CustomerId NUMBER := :New.CustomersInfoID;    	

BEGIN
	manage_history.UpdatePhone(tel,CustomerId);
END;
/
CREATE OR REPLACE TRIGGER insertIntoCostumers
INSTEAD OF INSERT
ON Customers
FOR EACH ROW 
DECLARE
		name VARCHAR2(50):= :NEW.Name;
		email VARCHAR2(50) := :NEW.Email;
		street VARCHAR2(50):= :NEW.Street;
		city VARCHAR2(50) := :NEW.City;
		postalCode VARCHAR2(7):= :NEW.postalCode;
		phone VARCHAR2(12):= :NEW.Phone;
BEGIN
	manage_history.insertCustomers(name,email,street,city,postalCode,phone);
END;
/
CREATE OR REPLACE TRIGGER UpdatePrice_ter
INSTEAD OF UPDATE
ON Products
FOR EACH ROW
BEGIN
	manage_history.UpdatePrice(:NEW.Price, :NEW.ProductsInfoID);
END;
/

CREATE OR REPLACE TRIGGER inserIntoProducts
INSTEAD OF INSERT
ON Products
FOR EACH ROW
DECLARE
    name VARCHAR2(50):= :NEW.Name;
    description VARCHAR2(100) := :NEW.Description;
    sizeID NUMBER :=:NEW.SizeID;
    beerTypeID NUMBER :=:NEW.BeerTypeID;
    inventoryStatusID NUMBER:= :NEW.InventoryStatusID;
    breweryID NUMBER := :NEW.BreweryID;
    price NUMBER(15,2) := :NEW.Price;

BEGIN
    manage_history.insertProducts(name, description, sizeID, beerTypeID, inventoryStatusID, breweryID, price);
END;
/




-- Commit Changes
COMMIT;
